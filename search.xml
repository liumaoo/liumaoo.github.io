<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据在计算机中的存储和运算</title>
      <link href="/2022/02/11/3.data/"/>
      <url>/2022/02/11/3.data/</url>
      
        <content type="html"><![CDATA[<p>关于整数与浮点数在计算机中的存储和运算：整型都以补码的形式存储，浮点数以二进制的科学技术法存储。</p><h2 id="数据存储与运算"><a href="#数据存储与运算" class="headerlink" title="数据存储与运算"></a>数据存储与运算</h2><p><img src="/graphics/botany15.jpg"></p><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>对于整型，计算机实际只存储补码， 所以原码转换为补码的过程，就是数据存储到计算机内存中的过程：写入数据(-1) -&gt; 变为原码（十进制变为二进制） -&gt; 转为反码 -&gt; 转为补码 -&gt; 存储<br>原码直接与进制转换有关，有符号数，人类逻辑真值，最高位为1则为负，0为正，剩下为绝对值。但若用原码进行加减运算，计算机并不能确定正负（对CPU消耗太大），因此采用补码（无符号数形式）运算再解码，转换进制。<br>能够采用补码运算的依据是周期函数的循环，对于限定字节数的基本类型，例：一个字节，8位，限定8位后，溢出部分被截掉，1111 1111 + 0000 0001 = 1 0000 0000 = 0000 0000. 2^8 = 256 即为循环周期，如同时钟周期为12。<br>因此，若m&gt;0, n&gt;0, 则m - n = m + (Max - n), Max为循环周期。<br>所以原码转为补码的过程：计算机检测数据最高位，若为0则为正数，反码，补码和原码相同；若最高位为1，则为负数，需要提负号取绝对值，再加上循环周期即可。<br>以4位做演示：例-3(1011)，提负号(-(1011 - 1000) = -0011)，加循环周期(-0011 + 1 0000 = -0011 + 1111 + 0001 = 1101)，提负号导致此时最高位一定为0，加循环周期分离的两步依次就是反码和补码。结论就是通常所说的，最高位1保持不变，其他位取反再加1。<br>同样的，补码转为原码，正数保持不变，负数还是最高位1保持不变，其他位取反再加1。<br>证明：设负数原码为x，补码为y，提符号减去的为n，最大周期为M，则 y = -(x - n) + M，即 y = -x + (M-n)，(M-n)为常量。所以 x = -y + (M-n)，负数补码变原码与原码变补码过程相同。<br>int 4 字节，32位范围最大为2.14 E^9。</p><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>对于浮点数：<br>单精度 float 4字节，32位。双精度 double 8字节，64位。都以二进制的科学技术法存储。<br>float：<br>1bit（符号位） 8bits（指数位） 23bits（尾数位）<br>double：<br>1bit（符号位） 11bits（指数位） 52bits（尾数位）</p><p><img src="/graphics/z.IEEE754.jpg"></p><p>1.范围float和double的范围是由指数的位数来决定的。于是，float的指数范围为-127 ~ +128，而double的指数范围为-1023 ~ +1024，并且指数位是按原码 + 偏移量的形式来划分的。其中负指数决定了浮点数所能表达的绝对值最小的非零数；而正指数决定了浮点数所能表达的绝对值最大的数，也即决定了浮点数的取值范围。float的范围为-2^128 ~ +2^128，也即-3.40E+38 ~ +3.40E+38；double的范围为-2^1024 ~ +2^1024，也即-1.79E+308 ~ +1.79E+308。</p><p>2.精度float和double的精度是由尾数的位数来决定的。浮点数在内存中是按科学计数法来存储的，其整数部分始终是一个隐含着的“1”，由于它是不变的，故不能对精度造成影响。float：2^23 = 8388608，一共七位，这意味着最多能有7位有效数字，但绝对能保证的为6位，也即float的精度为6 ~ 7位有效数字；double：2^52 = 4503599627370496，一共16位，同理，double的精度为15 ~ 16位。</p><p>3.存储和运算<br>原始十进制 -&gt; 二进制 -&gt; 科学计数格式 -&gt; IEEE754标准 -&gt; 存储<br>加减运算：1.指数低的数向指数高的数转换，向右移位多余的尾数不会保存 2.加减运算 3.结果转换为IEEE 754标准<br>在同类型两个浮点数进行加减运算并打印的过程中，可能会产生0 - 4次精度损失。分别为两个十进制数转换为二进制存储的过程、低位数向高位数移位的过程、结果转换为十进制数打印的时候。</p><p>More info: <a href="https://liumaoo.github.io/">Home</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于此博客</title>
      <link href="/2022/01/28/about/"/>
      <url>/2022/01/28/about/</url>
      
        <content type="html"><![CDATA[<p>欢迎来看我的博客呀!</p><h2 id="一切的开始"><a href="#一切的开始" class="headerlink" title="一切的开始!"></a>一切的开始!</h2><p><img src="/graphics/sakura.jpg"></p><h3 id="一份礼物"><a href="#一份礼物" class="headerlink" title="一份礼物!"></a>一份礼物!</h3><p>突然想起一些事情。有一年，Faker在S赛总决赛中失去了他人生中的第四冠。赛后有一张画：Faker低着头以手掩面，但是他的身后却浮现了加里奥，妖姬，瑞兹，劫等英雄的身影来安慰他。这让我内心很受触动。就像“人皇”Sky之于魔兽争霸，“小孩”之于拳皇街霸，虽然我不玩这些游戏，但对很多游戏玩家来说，这些选手以他们犀利的操作和绝妙的意识战术为这些游戏注入了活力，这是他们的青春。<br>金庸去世的时候，也有一张画：老爷子在前面只留一个背影，他的身后，那些书中的人物，郭靖，萧峰，杨过，张无忌，令狐冲，风清扬等人物会抱拳低着头说一声，“金老走好！”。一个人最大的成就莫过于人虽离开江湖，但江湖上处处都流传着他的传说。金庸古龙的小说又是多少人的青春呢？<br>就像高中的室友会着急回宿舍打电话问NBA双方得分，艾弗森，麦迪，科比就是他的青春。就像毛星云深耕于计算机图形学与引擎渲染，雷霄骅深耕于实时音视频领域，无私地分享知识，当他们英年早逝的时候，无数受益于他们的程序技术人黯然落泪。古往今来，很多很多的人，那些用自己的力量为别人谋福利的人，为正义真理献身的人，当他们死去的时候，面对他们的骨灰，高尚的人会洒下热泪。<br>就像武安李牧，挽国家之将倾；少保于谦，两袖清风，对他行刑的刽子手羞愤自杀，落泪无数。突然就有点伤感，前些天读《人间词话》，又读到一些伤感的词，李白的“音尘绝，西风残照，汉家陵阙。”，柳永的“今宵酒醒何处？杨柳岸，晓风残月。”，李煜的“流水落花春去也，天上人间。”，苏轼的“拣尽寒枝不肯栖，寂寞沙洲冷。”小学柳宗元的《江雪》，如今再读内心也已沧海桑田，“千山鸟飞绝，万径人踪灭。孤舟蓑笠翁，独钓寒江雪。”当整个世界只有自己一个人的时候，就像神州五号中的杨利伟，独自飘荡在太空望着地球时，会想些什么呢？那大概就是最终极的孤独。<br>我出生在这个世界上，普普通通，又能为这个世界留下什么呢？可即便如此，我还是有一些期望，期望留下我的痕迹，我那微不足道的绵薄之力。杜甫年轻时，“会当凌绝顶，一览众山小。”，经历安史之乱后，又在《咏怀古迹》中写到，“庾信平生最萧瑟，暮年诗赋动江关。”每个人都应该有一片桃花源，它存在于人的内心深处，是灵魂安身的地方。不管自己会经历什么，失败与否，又或人情冷暖，世态炎凉，因为那片桃花源，你依然身怀赤子之心。就像科比之于篮球，梵高之于画画，佩雷尔曼之于数学。<br>所以特在此记录日之所学，心之所想。另外，还有另外一个原因，现在快24岁了，将来我可能会结婚生子，我将来的孩子，我希望送他/她一份礼物。这个博客，我的所学，一些理性和感性的分析，就是我给他/她的礼物。希望他/她可以站在我的肩膀上能欣赏到远方更美丽的风景。<br>文章主要会是技术上的分析和学习笔记，涉及计算机图形学，数学和物理分析，包括游戏开发，引擎渲染，Unreal Engine, C++与算法基础，以及相关英文书籍的翻译，源码分析等。这还需要时间的沉淀，等技术达到一定层次后会在知乎上开设同步专栏。也会有一些人文类的文章，包括但不限于历史解读，诗词解析，画画和音乐方面的心得，一些花和动物的图片分享，还会有一些日常的随笔和感悟。<br>从12岁开始，我便独自照顾历代的星辰。在夜晚看着窗外，忽然难过，忽然又笑得打滚儿。那颗恒星辐射出的光，经过漫长光年的旅途，逐渐消散。在多年之后，太阳隐去的夜幕中，微弱的星光照进了眼睛，然后你看见了它。即使是距离地球最近的半人马座比邻星，也有4.2光年。当你有幸能观测到这暗红的星球时，此时此刻，它却是四年前的模样。让你不禁感叹大自然的奇妙，现在与过去的碰撞，一切都很令人遐想！</p><p>More info: <a href="https://liumaoo.github.io/">Home</a></p>]]></content>
      
      
      <categories>
          
          <category> 人文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/02/hello-world/"/>
      <url>/2021/12/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to my blog!</p><h2 id="The-begining-of-all"><a href="#The-begining-of-all" class="headerlink" title="The begining of all!"></a>The begining of all!</h2><p><img src="/graphics/sakura.jpg"></p><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world!"></a>hello world!</h3><pre class=" language-bash"><code class="language-bash">std::cout <span class="token operator">&lt;&lt;</span> <span class="token string">"hello world!"</span> <span class="token operator">&lt;&lt;</span> std::endl<span class="token punctuation">;</span></code></pre><p>More info: <a href="https://liumaoo.github.io/">Home</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
